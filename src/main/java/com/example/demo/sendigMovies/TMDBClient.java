package com.example.demo.sendigMovies;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class TMDBClient {
	final String API_KEY = "62972d61e70eda6830e96befdca61fff"; 
	final String BASE_URL = "https://api.themoviedb.org/3";
	public List<JsonNode> sendRequestForMovies(String genreId, String minYear, String maxYear, String region, 
			String minRating, String runtimeMin, String runtimeMax) {		
		int totalPages = 1;
		int currentPage = 1;
		List<JsonNode> movies = new ArrayList<>();

		
		WebClient webClient = WebClient.builder()
				.baseUrl(BASE_URL)
				.defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .build();
		
		while (currentPage <= totalPages) {
			final int page = currentPage;
		String response = webClient.get()
				.uri(uriBuilder -> {
					uriBuilder.path("/discover/movie")
					.queryParam("api_key", API_KEY)
					.queryParam("language", "ru")
					.queryParam("with_genres", genreId)
					.queryParam("page", page);
					if (region != null) {
						uriBuilder.queryParam("with_origin_country", region);
					}
					if (!(minYear.equals("notImpotant"))) {
						uriBuilder.queryParam("primary_release_date.gte", minYear);
					}
					if (!(maxYear.equals("notImpotant"))) {
						uriBuilder.queryParam("primary_release_date.lte", maxYear);
					}
					if (!(minRating.equals("notImpotant"))) {
						uriBuilder.queryParam("vote_average.gte", minRating);
					}
					if (!(runtimeMin.equals("notImpotant"))) {
						uriBuilder.queryParam("with_runtime.gte", runtimeMin);
					}
					if (!(runtimeMax.equals("notImpotant"))) {
						uriBuilder.queryParam("with_runtime.lte", runtimeMax);
					}
		            
					 return uriBuilder.build();
				})
				.retrieve()
			    .bodyToMono(String.class)
			    .block();
		try {
		ObjectMapper objectMapper = new ObjectMapper();
		JsonNode root = objectMapper.readTree(response);
		JsonNode resultsNode = root.path("results");
		for (JsonNode node: resultsNode) {
			movies.add(node);
		}
		totalPages = root.path("total_pages").asInt();
		currentPage++;
		} catch (Exception e) {
			e.printStackTrace();
		}			
		}
		return movies;

	}
	
	public String requestForGenreId(String value) {
	    String genreId = null;

	    Map<String, String> genreMapping = new HashMap<>();

	    // üî´ –ë–æ–µ–≤–∏–∫
	    genreMapping.put("—ç–∫—à–µ–Ω", "–±–æ–µ–≤–∏–∫");
	    genreMapping.put("action", "–±–æ–µ–≤–∏–∫");
	    genreMapping.put("—Å—Ç—Ä–µ–ª—è–ª–∫–∏", "–±–æ–µ–≤–∏–∫");
	    genreMapping.put("–¥—Ä–∞–∫–∏", "–±–æ–µ–≤–∏–∫");
	    genreMapping.put("–±–æ–π", "–±–æ–µ–≤–∏–∫");
	    genreMapping.put("–±–∏—Ç–≤–∞", "–±–æ–µ–≤–∏–∫");

	    // üß≠ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
	    genreMapping.put("adventure", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è");
	    genreMapping.put("–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è");
	    genreMapping.put("–∞–≤–∞–Ω—Ç—é—Ä–∞", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è");

	    // üé® –ú—É–ª—å—Ç—Ñ–∏–ª—å–º
	    genreMapping.put("–∞–Ω–∏–º–∞—Ü–∏—è", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º");
	    genreMapping.put("cartoon", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º");
	    genreMapping.put("–∞–Ω–∏–º–µ", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º");

	    // üòÇ –ö–æ–º–µ–¥–∏—è
	    genreMapping.put("—é–º–æ—Ä", "–∫–æ–º–µ–¥–∏—è");
	    genreMapping.put("—Å–º–µ—à–Ω–æ–µ", "–∫–æ–º–µ–¥–∏—è");
	    genreMapping.put("–∫–æ–º–µ–¥–∏–π–Ω—ã–π", "–∫–æ–º–µ–¥–∏—è");

	    // üïµÔ∏è –ö—Ä–∏–º–∏–Ω–∞–ª
	    genreMapping.put("–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–∫—Ä–∏–º–∏–Ω–∞–ª");
	    genreMapping.put("–ø—Ä–µ—Å—Ç—É–ø–Ω—ã–π", "–∫—Ä–∏–º–∏–Ω–∞–ª");
	    genreMapping.put("crime", "–∫—Ä–∏–º–∏–Ω–∞–ª");

	    // üìö –î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π
	    genreMapping.put("–¥–æ–∫", "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π");
	    genreMapping.put("–¥–æ–∫. —Ñ–∏–ª—å–º", "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π");
	    genreMapping.put("—Ä–µ–∞–ª—å–Ω—ã–π", "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π");
	    genreMapping.put("–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª–∫–∞", "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π");

	    // üé≠ –î—Ä–∞–º–∞
	    genreMapping.put("—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "–¥—Ä–∞–º–∞");
	    genreMapping.put("—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–¥—Ä–∞–º–∞");
	    genreMapping.put("–ª—é–±–æ–≤—å", "–¥—Ä–∞–º–∞");
	    genreMapping.put("–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è", "–¥—Ä–∞–º–∞");
	    genreMapping.put("—ç–º–æ—Ü–∏–∏", "–¥—Ä–∞–º–∞");

	    // üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π
	    genreMapping.put("—Å–µ–º–µ–π–Ω–æ–µ", "—Å–µ–º–µ–π–Ω—ã–π");
	    genreMapping.put("–¥–ª—è —Å–µ–º—å–∏", "—Å–µ–º–µ–π–Ω—ã–π");
	    genreMapping.put("family", "—Å–µ–º–µ–π–Ω—ã–π");

	    // üßù –§—ç–Ω—Ç–µ–∑–∏
	    genreMapping.put("–º–∞–≥–∏—è", "—Ñ—ç–Ω—Ç–µ–∑–∏");
	    genreMapping.put("–≤–æ–ª—à–µ–±—Å—Ç–≤–æ", "—Ñ—ç–Ω—Ç–µ–∑–∏");
	    genreMapping.put("—Å–∫–∞–∑–∫–∞", "—Ñ—ç–Ω—Ç–µ–∑–∏");
	    genreMapping.put("fantasy", "—Ñ—ç–Ω—Ç–µ–∑–∏");

	    // üèõÔ∏è –ò—Å—Ç–æ—Ä–∏—è
	    genreMapping.put("–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π", "–∏—Å—Ç–æ—Ä–∏—è");
	    genreMapping.put("—Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", "–∏—Å—Ç–æ—Ä–∏—è");
	    genreMapping.put("–¥—Ä–µ–≤–Ω–æ—Å—Ç—å", "–∏—Å—Ç–æ—Ä–∏—è");

	    // üëª –£–∂–∞—Å—ã
	    genreMapping.put("—Ö–æ—Ä—Ä–æ—Ä", "—É–∂–∞—Å—ã");
	    genreMapping.put("—Å—Ç—Ä–∞—à–Ω–æ–µ", "—É–∂–∞—Å—ã");
	    genreMapping.put("–ø—É–≥–∞—é—â–µ–µ", "—É–∂–∞—Å—ã");
	    genreMapping.put("—Å—Ç—Ä–∞—Ö", "—É–∂–∞—Å—ã");
	    genreMapping.put("–º–∏—Å—Ç–∏–∫–∞", "—É–∂–∞—Å—ã");

	    // üéµ –ú—É–∑—ã–∫–∞
	    genreMapping.put("–º—é–∑–∏–∫–ª", "–º—É–∑—ã–∫–∞");
	    genreMapping.put("–ø–µ—Å–Ω–∏", "–º—É–∑—ã–∫–∞");
	    genreMapping.put("–∑–≤—É–∫", "–º—É–∑—ã–∫–∞");
	    genreMapping.put("–º—É–∑", "–º—É–∑—ã–∫–∞");

	    // üîç –î–µ—Ç–µ–∫—Ç–∏–≤
	    genreMapping.put("—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–¥–µ—Ç–µ–∫—Ç–∏–≤");
	    genreMapping.put("—Ç–∞–π–Ω–∞", "–¥–µ—Ç–µ–∫—Ç–∏–≤");
	    genreMapping.put("–¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã–π", "–¥–µ—Ç–µ–∫—Ç–∏–≤");
	    genreMapping.put("mystery", "–¥–µ—Ç–µ–∫—Ç–∏–≤");

	    // üíï –ú–µ–ª–æ–¥—Ä–∞–º–∞
	    genreMapping.put("—Ä–æ–º–∫–æ–º", "–º–µ–ª–æ–¥—Ä–∞–º–∞");
	    genreMapping.put("—Å–ª–µ–∑–ª–∏–≤–æ–µ", "–º–µ–ª–æ–¥—Ä–∞–º–∞");
	    genreMapping.put("—Ä–æ–º–∞–Ω—Ç–∏–∫–∞+", "–º–µ–ª–æ–¥—Ä–∞–º–∞");

	    // ü™ê –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞
	    genreMapping.put("sci-fi", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞");
	    genreMapping.put("–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞");
	    genreMapping.put("–±—É–¥—É—â–µ–µ", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞");
	    genreMapping.put("—Ä–æ–±–æ—Ç—ã", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞");
	    genreMapping.put("–∑–≤–µ–∑–¥—ã", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞");

	    // üì∫ –¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–π —Ñ–∏–ª—å–º
	    genreMapping.put("—Ç–≤", "—Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–π —Ñ–∏–ª—å–º");
	    genreMapping.put("tv", "—Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–π —Ñ–∏–ª—å–º");
	    genreMapping.put("—Å–µ—Ä–∏–∞–ª", "—Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–π —Ñ–∏–ª—å–º");
	    genreMapping.put("—ç–ø–∏–∑–æ–¥", "—Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–π —Ñ–∏–ª—å–º");

	    // üß® –¢—Ä–∏–ª–ª–µ—Ä
	    genreMapping.put("–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "—Ç—Ä–∏–ª–ª–µ—Ä");
	    genreMapping.put("psychological", "—Ç—Ä–∏–ª–ª–µ—Ä");
	    genreMapping.put("–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "—Ç—Ä–∏–ª–ª–µ—Ä");
	    genreMapping.put("–∏–Ω—Ç—Ä–∏–≥–∞", "—Ç—Ä–∏–ª–ª–µ—Ä");

	    // ‚öîÔ∏è –í–æ–µ–Ω–Ω—ã–π
	    genreMapping.put("–∞—Ä–º–∏—è", "–≤–æ–µ–Ω–Ω—ã–π");
	    genreMapping.put("–≤–æ–π–Ω–∞", "–≤–æ–µ–Ω–Ω—ã–π");
	    genreMapping.put("military", "–≤–æ–µ–Ω–Ω—ã–π");

	    // ü§† –í–µ—Å—Ç–µ—Ä–Ω
	    genreMapping.put("–∫–æ–≤–±–æ–∏", "–≤–µ—Å—Ç–µ—Ä–Ω");
	    genreMapping.put("–¥–∏–∫–∏–π –∑–∞–ø–∞–¥", "–≤–µ—Å—Ç–µ—Ä–Ω");
	    genreMapping.put("—à–µ—Ä–∏—Ñ", "–≤–µ—Å—Ç–µ—Ä–Ω");
	    genreMapping.put("western", "–≤–µ—Å—Ç–µ—Ä–Ω");

	    try {
	        WebClient webClient = WebClient.builder()
	                .baseUrl("https://api.themoviedb.org/3")
	                .build();

	        String response = webClient.get()
	                .uri(uriBuilder -> uriBuilder
	                        .path("/genre/movie/list")
	                        .queryParam("api_key", API_KEY)
	                        .queryParam("language", "ru")
	                        .build())
	                .retrieve()
	                .bodyToMono(String.class)
	                .block();

	        ObjectMapper mapper = new ObjectMapper();
	        JsonNode genres = mapper.readTree(response).path("genres");
	        System.out.println(genres);

	        // –ó–∞–º–µ–Ω—è–µ–º value, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∞–ª–æ–≥
	        value = genreMapping.getOrDefault(value.trim().toLowerCase(), value.trim().toLowerCase());

	        for (JsonNode genre : genres) {
	            if (genre.path("name").asText().equalsIgnoreCase(value)) {
	                genreId = genre.path("id").asText();
	                break;
	            }
	        }

	        return genreId;

	    } catch (Exception e) {
	        e.printStackTrace();
	        return null;
	    }
	}

	
	
}
